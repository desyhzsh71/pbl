generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  fullName  String
  email     String @unique
  company   String
  job       String
  country   String
  password  String

  // relasi untuk mereset password
  passwordResets PasswordReset[]

  // relasi untuk organization
  organizationsOwned  Organization[]       @relation("organization_owner")
  organizationMembers OrganizationMember[]

  @@map("user")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("password_resets")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  ownerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relasi
  owner    User                   @relation("organization_owner", fields: [ownerId], references: [id], onDelete: Cascade)
  members  OrganizationMember[]
  projects Project[]

  @@map("organization")
}

model OrganizationMember {
  id             String    @id @default(uuid())
  userId         Int
  organizationId String
  role           Role
  status         Status    @default(PENDING)
  joinedAt       DateTime? @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // relasi
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@map("organization_member")
}

model Project {
  id             String        @id @default(uuid())
  name           String
  description    String?
  organizationId String
  createdBy      Int
  deadline       DateTime?
  status         ProjectStatus @default(ACTIVE)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // relasi
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([createdBy])
  @@map("project")
}

enum Role {
  OWNER
  COLLABORATOR
}

enum Status {
  PENDING
  ACTIVE
  INACTIVE
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

model Item {
  id   Int    @id @default(autoincrement())
  name String

  @@map("item")
}