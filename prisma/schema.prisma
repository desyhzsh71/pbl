generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String @unique
  company  String
  job      String
  country  String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relasi untuk mereset password
  passwordResets PasswordReset[]

  // relasi untuk organization
  organizationsOwned   Organization[]       @relation("organization_owner")
  organizationMembers  OrganizationMember[]

  // relasi untuk project
  projectsCreated      Project[]             @relation("project_creator")
  projectCollaborators ProjectCollaborator[]

  // relasi untuk billing address
  BillingAddress       BillingAddress[]

  // relasi untuk subscription and billing 
  subscriptions        Subscription[]
  paymentMethods       PaymentMethod[]
  billingHistories     BillingHistory[]
  
  @@map("user")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("password_resets")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  ownerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relasi
  owner   User                 @relation("organization_owner", fields: [ownerId], references: [id], onDelete: Cascade)
  members OrganizationMember[]
  projects Project[]

  @@index([ownerId])
  @@map("organization")
}

model OrganizationMember {
  id             String    @id @default(uuid())
  userId         Int
  organizationId String
  role           Role
  status         Status    @default(PENDING)
  joinedAt       DateTime? @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // relasi
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@map("organization_member")
}

model Project {
  id             String        @id @default(uuid())
  name           String
  description    String?
  organizationId String
  createdBy      Int
  deadline       DateTime?
  status         ProjectStatus @default(ACTIVE)
  customDomain   String?       @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // relasi
  organization  Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator       User                  @relation("project_creator", fields: [createdBy], references: [id], onDelete: Cascade)
  collaborators ProjectCollaborator[]

  @@index([organizationId])
  @@index([createdBy])
  @@map("project")
}

model ProjectCollaborator {
  id        String              @id @default(uuid())
  projectId String
  userId    Int
  role      ProjectRole
  status    Status              @default(PENDING)
  addedAt   DateTime            @default(now())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  // relasi
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_collaborator")
}

enum Role {
  OWNER
  COLLABORATOR
}

enum ProjectRole {
  OWNER
  EDITOR
  VIEWER
  SEO_MANAGER
  COLLABORATOR
}

enum Status {
  PENDING
  ACTIVE
  INACTIVE
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

model Plan {
  id              Int           @id @default(autoincrement())
  name            String
  price           Decimal
  description     String?
  bandwidthLimit  Int
  apiCallLimit    Int
  mediaAssetLimit Int
  status          PlanStatus    @default(active)

  subscriptions    Subscription[]
  billingHistories BillingHistory[]

  @@map("plan")
}

enum PlanStatus {
  active
  inactive
}

model Subscription {
 id               Int                 @id @default(autoincrement())
 userId           Int
 planId           Int
 startDate        DateTime
 endDate          DateTime
 autoRenewal      Boolean             @default(false)
 status           SubscriptionStatus  @default(active)
 paymentStatus    PaymentStatus       @default(unpaid)
 totalPrice       Decimal

 user   User    @relation(fields: [userId], references: [id])
 plan   Plan    @relation(fields: [planId], references: [id])

 @@map("subscription")
}

enum SubscriptionStatus {
  active
  inactive
  cancelled
}

enum PaymentStatus {
  paid
  unpaid
}

model BillingAddress {
  id            Int       @id @default(autoincrement())
  userId        Int       @unique
  fullName      String
  email         String
  country       String
  city          String
  state         String
  zip           String
  address       String
  company       String?    
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("billing_address")
}

model PaymentMethod {
  id              Int                   @id @default(autoincrement())
  userId          Int
  type            PaymentType
  provider        String?
  accountNumber   String
  status          PaymentMethodStatus   @default(active)

  user   User    @relation(fields: [userId], references: [id])

  @@map("payment_method")
}

enum PaymentType {
  credit_card
  e_wallet
}

enum PaymentMethodStatus {
  active
  deleted
}

model BillingHistory {
  id            Int             @id @default(autoincrement())
  userId        Int
  planId        Int
  datePaid      DateTime  
  nominal       Decimal
  status        BillingStatus
  invoiceUrl    String?

  user   User    @relation(fields: [userId], references: [id])
  plan   Plan    @relation(fields: [planId], references: [id])

  @@map("billing_history")
}

enum BillingStatus {
  active
  complete
  failed
}

model Item {
  id   Int    @id @default(autoincrement())
  name String

  @@map("item")
}